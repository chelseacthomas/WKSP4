install.packages("pkgdown")
library(pkgdown)
build_site()
build_articles()
install.packages("popdemo")
library(popdemo)
build_articles()
build_site()
library(pkgdown)
build_article(PopulationDynamics)
build_article(PopulationDynamics.Rmd)
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
# We'll start by creating three example populations
TortAMP <- c(1, 1, 2, 3, 5, 8, 13, 21) # A population that amplifies
TortATT <- c(21, 13, 8, 5, 3, 2, 1, 1) # A population that attenuates
TortBTH <- c(0, 0, 0, 1, 0, 0, 0, 0) # A population that does both
# Next, we'll bind them together
Tortvec3 <- cbind(AMP = TortAMP, ATT = TortATT, BTH = TortBTH)
Tortvec3
# Let's project to 50 time intervals and standardize the vector to sum to 1 as we did in the earlier example
Tortp3 <- project(Tort, Tortvec3, time = 50,
standard.A = TRUE, standard.vec = TRUE)
library(popdemo)
# Let's project to 50 time intervals and standardize the vector to sum to 1 as we did in the earlier example
Tortp3 <- project(Tort, Tortvec3, time = 50,
standard.A = TRUE, standard.vec = TRUE)
# And finally, let's plot
plot(Tortp3, log = "y"); lines(Tortpws, lty = 2)
( max3 <- apply(Tortvec3[,c(1,3)], 2, maxamp, A = Tort) )
( max3t <- apply(Tortvec3[,c(1,3)], 2, function(x){
maxamp(vector = x, A = Tort, return.t = TRUE)$t}) )
( min3 <- apply(Tortvec3[,c(2,3)], 2, maxatt, A = Tort) )
( min3t <- apply(Tortvec3[,c(2,3)], 2, function(x){
maxatt(vector = x, A = Tort, return.t = TRUE )$t}) )
points(c(max3t, min3t),
c(max3, min3),
pch = 3, col = "red")
max3 <- apply(Tortvec3[,c(1,3)], 2, maxamp, A = Tort)
max3t <- apply(Tortvec3[,c(1,3)], 2, function(x){
maxamp(vector = x, A = Tort, return.t = TRUE)$t})
min3 <- apply(Tortvec3[,c(2,3)], 2, maxatt, A = Tort)
min3t <- apply(Tortvec3[,c(2,3)], 2, function(x){
maxatt(vector = x, A = Tort, return.t = TRUE )$t})
# And finally, let's plot
plot(Tortp3, log = "y"); lines(Tortpws, lty = 2)
Tortps <- project(Tort, vec, time = 50,
standard.A = TRUE, standard.vec = TRUE)
data(Tort)
Tort
vec <- runif(8)
Tortp <- project(Tort, vec, time = 50, standard.vec = TRUE)
Tortp
vec(Tortp)[1:3,] # Here, we've limited the display to rows 1-3
plot(Tortp, log ="y")
eigs(Tort, "all")
Tortw <- eigs(Tort, "ss")
Tortpw <- project(Tort, Tortw, time = 50)
plot(Tortp, log = "y")
lines(0:50, Tortpw, lty = 2) # This line adds to the plot our recently projected population with the stable ratios
Tortps <- project(Tort, vec, time = 50,
standard.A = TRUE, standard.vec = TRUE)
Tortpws <- project(Tort, Tortw, time = 50,
standard.A = TRUE, standard.vec = TRUE)
plot(Tortps, log = "y")
lines(Tortpws, lty = 2)
dr(Tort)
# We'll start by creating three example populations
TortAMP <- c(1, 1, 2, 3, 5, 8, 13, 21) # A population that amplifies
TortATT <- c(21, 13, 8, 5, 3, 2, 1, 1) # A population that attenuates
TortBTH <- c(0, 0, 0, 1, 0, 0, 0, 0) # A population that does both
# Next, we'll bind them together
Tortvec3 <- cbind(AMP = TortAMP, ATT = TortATT, BTH = TortBTH)
Tortvec3
# Let's project to 50 time intervals and standardize the vector to sum to 1 as we did in the earlier example
Tortp3 <- project(Tort, Tortvec3, time = 50,
standard.A = TRUE, standard.vec = TRUE)
max3 <- apply(Tortvec3[,c(1,3)], 2, maxamp, A = Tort)
max3t <- apply(Tortvec3[,c(1,3)], 2, function(x){
maxamp(vector = x, A = Tort, return.t = TRUE)$t})
min3 <- apply(Tortvec3[,c(2,3)], 2, maxatt, A = Tort)
min3t <- apply(Tortvec3[,c(2,3)], 2, function(x){
maxatt(vector = x, A = Tort, return.t = TRUE )$t})
# And finally, let's plot
plot(Tortp3, log = "y"); lines(Tortpws, lty = 2)
points(c(max3t, min3t),
c(max3, min3),
pch = 3, col = "red")
build_articles()
build_articles()
build_articles()
build_articles()
remotes::install_github("jonesor/Rcompadre", build_vignettes = FALSE)
install.packages("remotes")
remotes::install_github("jonesor/Rcompadre", build_vignettes = FALSE)
build_articles()
load("~/GitHub/WKSP4/vignettes/COMADRE_v.4.20.11.1.RData")
build_articles()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
comadre <- as_cdb(comadre) # Converts the S3 database format from the website into S4
library(Rcompadre)
comadre <- as_cdb(comadre) # Converts the S3 database format from the website into S4
x <- subset(comadre, MatrixComposite == "Mean" & # Subsets the database based on variables in the metadata
Class == "Actinopterygii" &
StudyDuration >= 3 &
MatrixDimension > 3)
build_articles()
comadre <- cdb_fetch("comadre")
comadre <- as_cdb(comadre) # Converts the S3 database format from the website into S4
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
library(popdemo)
library(maps)
build_articles()
?damping.ratio
??damping.ratio
build_articles()
build_articles()
build_articles()
x<-subset(comadre, MatrixComposite == "Mean" &
Order == "Carnivora" &
MatrixCaptivity == "W" &
Lat > 0 &
SurvivalIssue < 1 &
MatrixSplit == "Divided" &
MatrixFec == "Yes")
x@data$lambdas <- NA
for (i in 1:length(x$mat)){
tryCatch({
x@data$lambdas[i] <- Re(eigen(x$mat[[i]]@matA)$value)[1]
}, error = function(e){})
}
x@data$lambdas
rampfunc <- colorRampPalette(c("green", "red"))
colVect <- rampfunc(100)
colVect <- paste(colVect, "90", sep = "")
s1 <- seq(min(x@data$lambdas, na.rm=TRUE),max(x@data$lambdas, na.rm=TRUE),
length.out = 100)
par(mfrow = c(1,1))
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)],cex = 2, pch = 16)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)],cex = 2, pch = 16)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-50, 75), border = "white")
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
names(x@data)
x@data$Lat
par(mfrow = c(1,1))
plot.new()
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white") points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white"), points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
plot.new(
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
plot.new(
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white"),
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
)
plot.new(
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white") &
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
par(mfrow = c(1,1)){
{map("world", col = "gray", fill = TRUE, bg = "light blue",
xlim = c(-175, 176), ylim = c(-60, 85), border = "white")
points(jitter(x@data$Lon, 0.6), jitter(x@data$Lat, 0.6),
col = colVect[findInterval(x@data$lambdas, s1)], cex = 2, pch = 16)
}
build_articles()
output <- data.frame(lambdas = rep(NA, length(x$mat)), damps = rep(NA, length(x$mat)))
for (i in 1:length(x$mat)){
output$lambdas[i] <- Re(eigen(x$mat[[i]]@matA)$value)[1]
output$damps[i] <- damping.ratio(x$mat[[i]]@matA)
}
output
library(popbio)
install.packages("popbio")
library(popbio)
build_articles()
build_articles()
install.packages("Rage")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MASS)
build_articles()
build_articles()
build_articles()
